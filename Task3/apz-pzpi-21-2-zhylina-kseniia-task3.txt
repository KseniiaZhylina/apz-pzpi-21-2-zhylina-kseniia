1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою є розробка програмного забезпечення для IoT пристрою, який входить у систему для управління коворкінгами. Це включає в себе вибір та інтеграцію необхідних модулів, розробку програмного та апаратного забезпечення пристрою, а також визначення взаємодії з іншими компонентами системи. Додатково, потрібно провести аналіз та визначити оптимальні інженерні рішення, а також побудувати відповідні діаграми для наочного представлення структури та взаємодії всіх елементів системи.


1.2	Моделювання програмної системи


Для докладного огляду функціональності програмного забезпечення була розроблена UML діаграму прецедентів (див. додаток А.1).
На цій діаграмі можна помітити функцію для взаємодії з серверною частиною. Ця функція використовується як для перевірки відповідності пароля, який ввів користувач з тим, що записан в базі даних.
Повний цикл роботи системи можна описати так:
1. Менеджер повинен локально підключити контролер до потрібних дверей, використовуючи конфігурацію Wi-Fi, і вказати номер кімнати. Для цього може знадобитися взаємодія зі спеціальним інструментом конфігурації або налаштування в файлі wifi-scan.ino. У наступних випадках система автоматично підключиться до налаштованої мережі Wi-Fi і отримає дані про приміщення з сервера.
2. Після успішного підключення до мережі система надсилає запити на сервер, щоб отримати інформацію про бронювання. Ці дані включають код доступу та термін бронювання.
3. Коли система отримує інформацію про те, що користувач ввів пароль за допомогою клавіатури, вона звертається до серверної частини за допомогою класу VerifyCode і порівнює паролі.
4. Якщо пароль правильний, то система відкриває дверь (сервопривод) для користувача. Про невдала спробу верифікації користувач дізнається при виведені відповідного повідомлення на екрані.
5. Цей цикл повторюється до тих пір, поки система не буде відключена від живлення.


1.3	Взаємодія між частинами системи


У процесі взаємодії програмного забезпечення з іншими частинами системи ключову роль відіграє серверна частина, яка була розширена новими методами для більш ефективної обробки інформації.
Для більш детального розуміння взаємодії програми з серверною частиною, була створена діаграма взаємодії на основі діаграми активності щодо обробки даних (див. додаток А.2). На цій діаграмі можна відслідковувати послідовність дій програми та процес взаємодії з серверною частиною. Це сприяє глибшому розумінню внутрішньої логіки системи та її взаємодії з іншими компонентами.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура системи


Розробка програмного забезпечення для пристрою IoT на мові програмування C++ відбувалась у середовищі симуляції Wokwi, що є важливим етапом для тестування та відлагодження перед фізичною реалізацією системи. Використання мікроконтроллера ESP32 у поєднанні із симулятором Wokwi надає можливість емулювати поведінку пристрою та взаємодію з мережею та інтернетом.
Основні переваги використання ESP32 включають його здатність до підключення до мережі, що робить його ідеальним вибором для пристроїв IoT. Можливість виходу в інтернет дозволяє здійснювати взаємодію з серверами, отримання та відправлення даних.
Додатково був використан wokwi-servo. Він дозволяє симулювати функціональність сервоприводу та тестувати взаємодію з ним в умовах, які наближені до реального використання.
Основні бібліотеки, які використовуються в коді, включають:
−	WiFi.h: Бібліотека для роботи з бездротовим з'єднанням Wi-Fi. Вона використовується для підключення мікроконтролера до мережі Wi-Fi.
−	ESP32Servo.h: Бібліотека для управління сервоприводом на платформі ESP32. В даному випадку використовується для контролю положення сервоприводу, який може відкривати дверь.
−	RTClib: Дозволяє взаємодіяти з годинниками реального часу (RTC), такими як DS1307, DS3231 та іншими. Використовується отримання поточної дати та часу.
−	Keypad: Сприяє використанню матричних клавіатур для введення даних. В даному випадку для вводу пароля для кімнати.
−	ArduinoSTL: Надає можливості стандартної бібліотеки шаблонів (STL) для Arduino. Реалізує загальні контейнери STL, такі як вектори, списки та рядки, що дозволяє використовувати розширені структури даних та алгоритми.
−	HTTPClient.h: Бібліотека для виконання HTTP-запитів. Використовується для взаємодії з сервером та виконання HTTP GET-запитів для отримання та оновлення інформації про тварину.
−	ArduinoJson.h: Бібліотека для роботи з форматом JSON на платформі Arduino. Використовується для обробки JSON-відповіді від сервера.
−	LiquidCrystal I2C: Керує дисплеями. Відображає пароль, який вводить користувач коворкінга.


2.2	Програмна розробка системи


Перед початком написання коду було створено схему для фізичного розміщення частин системи: контроллера та зовнішних модулів (див. додаток А.5).
Після визначення схеми програми, переходимо до написання коду.
При розробці програмної системи wifi-scan.ino виступає в ролі основного коду програми, який інтегрує різні апаратні компоненти та обробляє основний логічний потік. Він включає в себе налаштування середовища розробки з необхідними бібліотеками, ініціалізацію апаратних компонентів та реалізацію основного циклу для обробки введення з клавіатури та зв'язку з сервером. Процес розробки включає налагодження Wi-Fi з'єднань, тестування HTTP запитів та забезпечення належного керування сервоприводом.
На етапі розробки, InputCode.h забезпечує необхідні функції для ефективного керування введенням даних користувачем. Це включає в себе конфігурацію клавіатури, реалізацію методів управління масивом вводу та забезпечення коректного оновлення дисплея. До завдань розробки входить написання та тестування коду для обробки різних взаємодій користувача, керування вмістом дисплея та інтеграція цих функцій з основною логікою програми у wifi-scan.ino.
VerifyCode.h фокусується на внутрішньому зв'язку, необхідному для перевірки коду. Завдання розробки тут включають налаштування HTTP-клієнта, форматування корисного навантаження JSON і обробку відповідей сервера. Цей модуль розроблений таким чином, щоб бути надійним і обробляти різні сценарії відповідей, гарантуючи, що система може надійно перевіряти коди на сервері. Тестування включає в себе моделювання відповідей сервера і перевірку правильності роботи логіки перевірки за різних умов.
Таким чином, всі ці файли разом сприяють створенню добре структурованої програмної системи з чітким розподілом завдань між апаратною взаємодією, управлінням користувацькими даними та внутрішнім зв'язком, що полегшує модульний і підтримуваний процес розробки.


2.3	Висновки


Протягом цієї лабораторної роботи було розроблено програмне забезпечення для пристрою IoT, яке є важливою складовою системи для керування коворкінгом. Архітектура системи була детально описана, включаючи програмну реалізацію та фізичну схему.
