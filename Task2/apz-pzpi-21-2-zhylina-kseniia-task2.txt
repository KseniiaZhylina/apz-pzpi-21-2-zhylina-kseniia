1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою роботи є розробка та моделювання серверної частини програмної системи для підтримки функціоналу, пов'язаного з роботою менеджерів в коворкінгах та забезпеченням ефективного взаємодії з користувачами. 
Окрім цього потрібно навести опис прийнятих інженерних рішень та представити загальну архітектуру системи.


1.2	Моделювання програмної системи


Для початку роботи необхідно провести концептуальне моделювання предметної області.
За допомогою програмної системи користувачі повинні мати можливість переглядати, додавати, зберігати, редагувати, шукати, фільтрувати та видаляти інформацію, що стосується коворкінга. Всі ці дії повинні виконувати різні групи користувачів, які мають намір використовувати додаток для різних цілей.
Система матиме розподіл за двома ролями користувачів:
-	звичайний користувач;
-	менеджер системи.


1.3	Аналіз інформаційних потреб користувачів


Ділення користувачів на звичайних користувачів та менеджерыв є стандартною практикою в розробці програмних систем. Кожна з цих груп має свої унікальні ролі, обов'язки та доступ до функціоналу системи. Була розроблена UML-діаграма прецедентів для звичайного користувача (див. додаток А.2) та менеджера (див. додаток А.1), а також описані інформаційні потреби:
У програмній системі звичайні користувачі матимуть можливість:
Реєструватися та авторизуватися:
-	можливість створення та управління особистим профілем;
-	вхід в систему зі своїми обліковими даними.
Робити резервацію:
-	можливість переглядати кімнати та їх складові елементи за допомогою інтуїтивно зрозумілої візуалізації кімнат;
-	робити пошук та фільтрацію: використання розширених опцій пошуку та фільтрації характеристиками кімнат (розмір, обладнання, доступність) для зручної резервації робочого місця;
-	отримувати дані про наявність вільних номерів у режимі реального часу, за для запобігання конфліктам з надмірним бронюванням;
-	резервувати одне або багато місць в обраній кімнаті.
В свою чергу менеджер зможе:
Обробляти бронювання:
-	перегляд та затвердження або відхилення заявок на резервацію робочого місця;
-	наявність інструментів для фільтрації бронювань (наприклад, за користувачем, діапазоном дат), що є важливим для ефективного управління.
Відстежування користувачів:
-	швидкий доступ до профілів користувачів, включаючи контактну інформацію та історію бронювання;
-	блокування користувачів у випадку порушень правил чи неправомірної поведінки;
-	керування правами користувачів.
Керувати звітами:
-	можливість створювати звіти на основі обраних менеджером даних, що налаштовуються (використання простору, пікові години, тенденції користувачів);
-	можливість переглядати вже створенні звіти дозволить менеджерам відстежувати ключові показники.


2	ПРОЄКТУВАННЯ БАЗИ ДАНИХ
2.1	Проектування бази даних з використанням ER діаграми


Для проектування структури бази даних програмної системи було розроблено ER діаграму (див. додаток А.5). 
База даних міститиме 6 таблиць та 15 неключових атрибутів. Нижче наведено детальний опис усіх зв’язків між таблицями в базі даних.
Визначено, що один користувач може робити багато резервацій, але на одну резервацію може бути записан тільки один користувач. 
Також передбачено, що одна резервація може бути сворена на декілька (багато) робочих місць, в свою чергу на одне і те саме робоче місце може бути зроблено багато резервацій в різні проміжку часу.
Визначено, що одне робоче місце може знаходитися в лише одній кімнаті, але в одній кімнаті може знаходитися багато робочих місць.
Крім того, одна кімната може належити лише одному коворкінгу, але один коворкінг може мати багато кімнат.
Зв’язок між коворкінгом та менеджером передбачає, що один коворкінг може мати багато менеджерів, але один менеджер може бути пов’язаний тільки з одним коворкінгом.


3	РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
3.1	Архітектура системи


У самому початку проекту була виготовлена UML-діаграму розгортання (див. додаток А.4), щоб об'ємно представити структуру програмної системи, яка складається з п'яти ключових компонентів:
-	серверна частина;
-	база даних;
-	веб-застосунок;
-	мобільний застосунок;
-	ІoT-девайс.
Ця діаграма є значущим інструментом для візуалізації фізичної архітектури системи. Використовуючи діаграму розгортання, було визначено розташування та зв'язки між компонентами, що спрощує проектування, аналіз та оптимізацію фізичної структури системи.
Також була створена діаграма станів (див. додаток А.3) для моделювання динамічної поведінки ключових елементів системи. Вона допомагає забезпечити чітке визначення поведінки системи, запобігаючи несподіваним помилкам і покращуючи взаємодію з користувачем.


3.2	Розробка сервера


У якості технології для розробки елементів серверної частини в проекті було використано ASP.NET Core Web API, обрана мова програмування - C#. Розробка здійснювалася у середовищі розробки Visual Studio, що забезпечило ефективність та зручність у процесі творення програмного продукту.
Для початку було створено веб-додаток та конфігурація сервісів (див. додаток Б.1, рядок 8). Далі додані сервісів, такі як контролери та репозиторії, які будуть використовуватися в додатку (див. додаток Б.1, рядки 9-15). Додано підключення до бази даних через Entity Framework, використовуючи PostgreSQL (див. додаток Б.1, рядки 17-18). Встановлюється підтримка Swagger для автоматичної генерації документації API сервісів (див. додаток Б.1, рядки 20-21). Додаток створюється, і в режимі розробки активується Swagger для документації API (див. додаток Б.1, рядки 22-27). Вказані базові опції для додатка, такі як перенаправлення з HTTP на HTTPS та авторизація (див. додаток Б.1, рядки 28-29) та визначено використання контролерів та запуск додатка, який слухатиме запити і виконуватиме відповідні операції (див. додаток Б.1, рядки 30-31).


3.3	REST специфікація


Booking:
GET /api/booking/ – отримати всі наявні резервації
POST /api/booking/{id} – додати нову резервацію
GET /api/booking/{id} – отримати одну резервацію обрану за Id
PUT /api/booking/edit/{id} – змінити інформацію про обрану резервацію
DELETE /api/booking/delete/{id} –видалити обрану резервацію
GET /api/booking/byUser/{userId} – отримати всі резервації вибраного за Id користувача
CoworkingSpace:
GET /api/coworkingSpace/ – отримати всі коворкінги
POST /api/coworkingSpace/ – додати новий коворкінг
GET /api/coworkingSpace/{id} – отримати один коворкінг обраний за Id
PUT /api/coworkingSpace/edit/{id} – змінити інформацію про обраний коворкінг
DELETE /api/coworkingSpace/delete/{id} – видалити обраний коворкінг 
PUT /api/coworkingSpace/addManager – додати обраному коворкінгу менеджера
Manager:
GET /api/manager/ – отримати всіх менеджерів
POST /api/manager/ – додати нового менеджера
GET /api/manager/{id} – отримати одного менеджера обраного за Id
PUT /api/manager/edit/{id} – змінити інформацію про обраного менеджера
DELETE /api/manager/delete/{id} – видалити обраного менеджера
DELETE /api/manager/deleteUser/{id} – відалити обраного користувача
POST /api/manager/login – вхід в особистий кабінет
POST /api/manager/logout –вихід з особистого кабінета
Room:
GET /api/room/ – отримати всі кімнати
POST /api/room/ – додати нову кімнату
GET /api/room/{id} – отримати кімнату обрану за Id
PUT /api/room/edit/{id} –змінити інформацію про обрану кімнату
DELETE /api/room/delete/{id} –видалити обрану кімнату
GET /api/room/byCoworkingSpace/{coworkingSpaceId} – отримати всі кімнати обраного коворкінга
User:
GET /api/user/ – отримати всіх користувачів
POST /api/user/ – додати нового користувача
GET /api/user/{id} – отримати користувача обраного за Id
PUT /api/user/edit/{id} – змінити інформацію про обраного користувача
DELETE /api/user/delete/{id} – видалити обраного користувача
POST /api/user/login – вхід в особистий кабінет
POST /api/user/logout – вихід з особистого кабінета
Workplace
GET /api/workplace/ – отримати всі робочі місця
POST /api/workplace/ – додати нове робоче місце
GET /api/workplace/{id} – отримати робоче місце обране за Id
PUT /api/workplace/edit/{id} – змінити інформацію про обране робоче місце
DELETE /api/workplace/delete/{id} – видалити обране робоче місце
GET /api/workplace/byRoom/{roomId} – отримати всі робочі місця в обраній кімнаті


3.4	Тестування


Тестування програми було виконано використовуючи Swagger.
Початковим етапом була інтеграція Swagger у проект ASP.NET Core. Був встановл необхідний пакет Swagger через NuGet та налаштуван в стартап-класі додатка.
Swagger автоматично генерує документацію API на основі атрибутів та коментарів у коді. Ми використовували атрибути, такі як [ApiController], [Route], і додавали коментарі до методів для збільшення зрозумілості документації.
Використовуючи Swagger UI, ми перевірили, чи правильно вказані параметри запиту для кожного ендпоінта, та перевірили структуру відповіді. Це дозволило впевнитися в коректності роботи API та забезпечити відповідність до специфікації.
