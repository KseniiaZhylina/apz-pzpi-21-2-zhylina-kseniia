1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Мета - створити надійний frontend для системи управління коворкінгом. Це передбачає вибір та інтеграцію необхідних модулів, розробку програмного забезпечення, яке безперешкодно взаємодіє з бекендом та іншими компонентами системи, а також забезпечення інтуїтивно зрозумілого користувацького досвіду. Крім того, проект передбачає аналіз та визначення найбільш ефективних інженерних рішень, а також розробку діаграм, що ілюструють структуру та взаємодію всіх елементів системи. 


1.2	Моделювання програмної системи


Щоб полегшити розробку надійної клієнтської частини для системи управління коворкінгом, було розроблено діаграму прецедентів UML, яка надає детальний огляд функціональності програмного забезпечення (див. додаток А.1). Ця діаграма ілюструє комплексні взаємодії та процеси всередині системи. 
Функціональні можливості розділені між двома типами користувачів: клієнтами та менеджерами.
Особливості клієнта:
−	Клієнти можуть створити новий обліковий запис, зареєструвавшись через систему.
−	Клієнти можуть бачити всі свої поточні та минулі бронювання.
−	Клієнти можуть переглянути всі доступні коворкінги, кімнати та робочі місця, щоб зробити нові бронювання.
−	Клієнти можуть обирати та бронювати доступні місця та час.
−	Клієнти мають можливість оновлювати свою особисту інформацію у своєму обліковому записі.
Функції менеджера:
−	Менеджери можуть бачити список всіх зареєстрованих клієнтів і мають право видаляти акаунти клієнтів, якщо це необхідно.
−	Менеджери мають доступ до всіх бронювань і можуть керувати ними, включаючи можливість видалити будь-яке бронювання.
−	Менеджери можуть переглядати всі кімнати та робочі місця у своєму коворкінгу, а також створювати нові кімнати та робочі місця.
−	Менеджери можуть оновлювати свою особисту інформацію в акаунті менеджера.
Система підтримує кілька мов, дозволяючи користувачам перемикатися між англійською та українською.
Основна увага приділяється безшовному, зручному інтерфейсу, щоб забезпечити ефективну роботу як для клієнтів, так і для менеджерів.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура системи


Додаток побудовано з використанням багаторазових React-компонентів, що сприяє створенню модульної та підтримуваної кодової бази. Це гарантує, що кожна частина програми є самодостатньою і може бути розроблена та протестована незалежно.
Компоненти управління даними:
−	Керують даними та бізнес-логікою додатку;
−	Забезпечують пошук, зберігання та маніпулювання даними, надаючи чистий інтерфейс для інших компонентів для взаємодії з даними;
−	Забезпечують цілісність та узгодженість основної функціональності додатку.
Компоненти інтерфейсу користувача:
−	Створюйте користувацький інтерфейс (UI) додатку за допомогою React-компонентів;
−	Відображають дані та реєструють взаємодію з користувачем, забезпечуючи адаптивний та зручний інтерфейс;
−	Відповідають за макет, структуру та зовнішній вигляд компонентів UI, забезпечуючи узгодженість та зручність використання.
Компоненти управління станом:
−	Виступають посередником між даними та компонентами інтерфейсу, полегшуючи комунікацію між ними;
−	Підтримують стан інтерфейсу користувача, забезпечуючи оновлення інтерфейсу у відповідь на зміни в даних;
−	Обробляти вхідні дані користувача та відповідно оновлювати компоненти даних, забезпечуючи коректне застосування бізнес-логіки до даних.
Така архітектура на основі компонентів забезпечує чіткий розподіл завдань, що дозволяє ефективно розробляти, тестувати та підтримувати систему управління коворкінгом.


2.2	Програмна розробка системи


Хуки React'а useState та useEffect використовуються для управління станом, забезпечуючи чуйний та інтерактивний користувацький досвід. Це дозволяє додатку ефективно реагувати на взаємодію з користувачем та зміни даних.
Інтерфейс підтримує кілька мов за допомогою файлів локалізації, що дозволяє користувачам легко перемикатися між англійською та українською мовами. Це гарантує, що додаток буде доступним для ширшої аудиторії.
Ключові сервіси та компоненти:
AuthService відповідає за процеси автентифікації користувачів. Вона обробляє операції реєстрації, входу та виходу користувачів, забезпечуючи безпечне керування сеансами користувачів. Цей сервіс взаємодіє з сервером для перевірки облікових даних користувача та управління даними сеансу.
BookingService керує всіма операціями, пов'язаними з бронюванням. Сюди входить створення нових бронювань, пошук існуючих бронювань за різними критеріями (наприклад, ідентифікатор робочого місця або ідентифікатор користувача) і видалення бронювань. Це гарантує, що користувачі можуть ефективно керувати бронюванням своїх робочих місць.
UserService виконує операції, пов'язані з даними користувачів. Сюди входить отримання інформації про користувачів, оновлення профілів користувачів і керування обліковими записами користувачів. Він надає необхідний функціонал для підтримки інформації про користувачів та забезпечення актуальності даних користувачів.
CoworkingSpaceService відповідає за управління даними коворкінгу. Він виконує такі операції, як вибірка всіх коворкінгів, пошук приміщень за ідентифікатором менеджера та управління даними про окремі приміщення. Ця послуга гарантує, що інформація про доступні коворкінги є доступною та керованою.
RoomService фокусується на управлінні даними про приміщення в коворкінгу. Він включає в себе операції з пошуку всіх приміщень, створення нових приміщень та управління даними про приміщення. Цей сервіс відіграє вирішальну роль в організації планування коворкінгу та забезпеченні точного збереження інформації про приміщення.
WorkplaceService займається управлінням окремими робочими місцями в приміщенні. Він дозволяє отримувати робочі місця за ідентифікатором кімнати та створювати нові робочі місця. Цей сервіс гарантує, що розподіл та управління робочими місцями здійснюється ефективно.


2.3	Висновки


Ця лабораторна робота успішно продемонструвала застосування сучасних методів веб-розробки для створення масштабованої та підтримуваної системи управління коворкінгом. Модульний дизайн, стратегії управління станом та комплексний рівень обслуговування гарантують, що система є надійною, зручною для користувача та адаптованою до майбутніх удосконалень. Цей проект надав цінний досвід розробки складних веб-додатків, підкресливши важливість найкращих архітектурних практик та ефективної інтеграції сервісів.